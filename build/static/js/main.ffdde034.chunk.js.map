{"version":3,"sources":["redux/auth/actionType.ts","redux/auth/reducers.ts","redux/index.ts","configs/configureStore.ts","discordOauth.js","containers/Login/index.tsx","containers/Validate/index.tsx","redux/auth/actions.ts","Router/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["initialState","accessToken","refreshToken","auth","state","action","type","ACTION","payload","rootReducer","combineReducers","persistConfig","key","storage","persistedReducer","persistReducer","oauth","DiscordOauth2","clientId","discordClient","clientSecret","redirectUri","Background","styled","div","LoginContainer","LoginTitle","h1","Login","useEffect","onClick","url","generateAuthUrl","scope","crypto","randomBytes","toString","window","open","mapDispatchToProps","setToken","connector","connect","props","location","useLocation","history","useHistory","checkValidate","a","params","queryString","parse","search","axios","post","stringify","client_id","client_secret","redirect_uri","grant_type","code","headers","res","console","log","status","data","access_token","refresh_token","push","AuthRoute","children","rest","render","to","pathname","from","path","exact","store","createStore","applyMiddleware","thunk","persistor","persistStore","App","loading","Router","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ffdde034.chunk.js","sourcesContent":["export const SET_TOKEN = 'SET_TOKEN'\r\n\r\nexport default {\r\n  SET_TOKEN,\r\n}\r\n","import ACTION from './actionType'\r\n\r\nexport interface AuthState {\r\n  accessToken: string | null\r\n  refreshToken: string | null\r\n}\r\n\r\nexport const initialState: AuthState = {\r\n  accessToken: null,\r\n  refreshToken: null,\r\n}\r\n\r\nconst auth = (state = initialState, action: { type: string; payload?: object }): AuthState => {\r\n  switch (action.type) {\r\n    case ACTION.SET_TOKEN:\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default auth\r\n","import { combineReducers } from 'redux'\r\nimport auth from './auth/reducers'\r\n\r\nconst rootReducer = combineReducers({\r\n  auth,\r\n})\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>\r\n\r\nexport default rootReducer\r\n","import { createStore, applyMiddleware } from 'redux'\r\nimport { persistStore, persistReducer } from 'redux-persist'\r\nimport thunk from 'redux-thunk'\r\nimport storage from 'redux-persist/lib/storage'\r\n\r\nimport rootReducer from '~/redux'\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage,\r\n}\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\r\n\r\nexport default () => {\r\n  const store = createStore(persistedReducer, applyMiddleware(thunk))\r\n  const persistor = persistStore(store)\r\n  return {\r\n    store,\r\n    persistor,\r\n  }\r\n}\r\n","export default {\r\n  clientId: '701046332835758101',\r\n  clientSecret: 'i7PzKIwZGF1TH6XhpJ2wWkCBx4X53w5g',\r\n  redirectUri: 'http://localhost:5000/validate',\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button } from 'antd'\r\nimport crypto from 'crypto'\r\nimport DiscordOauth2 from 'discord-oauth2'\r\nimport discordClient from '~/discordOauth'\r\n\r\nconst oauth = new DiscordOauth2({\r\n  clientId: discordClient.clientId,\r\n  clientSecret: discordClient.clientSecret,\r\n  redirectUri: discordClient.redirectUri,\r\n})\r\n\r\nconst Background = styled.div`\r\n  background: rgb(44, 62, 80);\r\n  background: linear-gradient(180deg, rgba(44, 62, 80, 1) 0%, rgba(253, 116, 108, 1) 100%);\r\n  width: 100vw;\r\n  min-height: 100vh;\r\n`\r\n\r\nconst LoginContainer = styled.div`\r\n  background: white;\r\n  align-self: center;\r\n  min-width: 500px;\r\n  min-height: 300px;\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  border-radius: 8px;\r\n  padding: 8px;\r\n`\r\n\r\nconst LoginTitle = styled.h1`\r\n  text-align: center;\r\n`\r\n\r\nconst Login = () => {\r\n  const login = () => {\r\n    const url = oauth.generateAuthUrl({\r\n      scope: ['identify'],\r\n      state: crypto.randomBytes(16).toString('hex'), // Be aware that randomBytes is sync if no callback is provided\r\n    })\r\n    window.open(url, '_self')\r\n  }\r\n  useEffect(() => {\r\n    // const accessToken = localStorage.getItem('accessToken')\r\n    // if (!!accessToken) {\r\n    //   history.push('/')\r\n    // }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n  return (\r\n    <Background>\r\n      <LoginContainer>\r\n        <LoginTitle>Sign-In</LoginTitle>\r\n        <Button onClick={login} type=\"primary\">\r\n          Sign-In with Discord\r\n        </Button>\r\n      </LoginContainer>\r\n    </Background>\r\n  )\r\n}\r\n\r\nexport default Login\r\n","import React, { useEffect } from 'react'\r\nimport { useLocation, useHistory } from 'react-router-dom'\r\nimport queryString from 'query-string'\r\nimport discordClient from '~/discordOauth'\r\nimport axios from 'axios'\r\nimport { connect, ConnectedProps } from 'react-redux'\r\nimport { RootState } from '~/redux'\r\nimport { setToken } from '~/redux/auth/actions'\r\n\r\nconst mapStateToProps = (state: RootState) => ({ auth: state.auth })\r\nconst mapDispatchToProps = { setToken }\r\nconst connector = connect(mapStateToProps, mapDispatchToProps)\r\ntype ReduxProps = ConnectedProps<typeof connector>\r\ntype Props = ReduxProps & {}\r\n\r\nconst Validate = (props: Props) => {\r\n  const location = useLocation()\r\n  const history = useHistory()\r\n  useEffect(() => {\r\n    checkValidate()\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n\r\n  const checkValidate = async () => {\r\n    const params = queryString.parse(location.search)\r\n    try {\r\n      const res = await axios.post(\r\n        'https://discord.com/api/oauth2/token',\r\n        queryString.stringify({\r\n          client_id: discordClient.clientId,\r\n          client_secret: discordClient.clientSecret,\r\n          redirect_uri: discordClient.redirectUri,\r\n          scope: 'identify',\r\n          grant_type: 'authorization_code',\r\n          code: params.code,\r\n        }),\r\n        {\r\n          headers: {\r\n            'Content-Type': 'application/x-www-form-urlencoded',\r\n          },\r\n        }\r\n      )\r\n      console.log('props :>> ', props)\r\n      if (res.status === 200) {\r\n        // localStorage.setItem('accessToken', res.data.access_token)\r\n        // localStorage.setItem('refreshToken', res.data.refresh_token)\r\n        props.setToken(res.data.access_token, res.data.refresh_token)\r\n        history.push('/')\r\n      } else {\r\n        history.push('/login')\r\n      }\r\n    } catch (err) {\r\n      console.log('err :>> ', err)\r\n      history.push('/login')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>validating</h1>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default connector(Validate)\r\n","import ACTION from './actionType'\r\n\r\nexport const setToken = (accessToken: string, refreshToken: string) => ({\r\n  type: ACTION.SET_TOKEN,\r\n  payload: {\r\n    accessToken,\r\n    refreshToken,\r\n  },\r\n})\r\n","import React from 'react'\r\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom'\r\nimport { connect, ConnectedProps } from 'react-redux'\r\nimport Login from '~/containers/Login'\r\nimport Validate from '~/containers/Validate'\r\nimport { RootState } from '~/redux'\r\nconst mapStateToProps = (state: RootState) => ({ auth: state.auth })\r\nconst mapDispatchToProps = {}\r\nconst connector = connect(mapStateToProps, mapDispatchToProps)\r\ntype ReduxProps = ConnectedProps<typeof connector>\r\ntype Props = ReduxProps & {}\r\n\r\nconst RouterContainer = (props: Props) => {\r\n  console.log('props :>> ', props)\r\n  const AuthRoute = ({ children, ...rest }: { children: React.ReactNode }) => (\r\n    <Route\r\n      {...rest}\r\n      render={({ location }) => {\r\n        return !!props.auth.accessToken ? (\r\n          children\r\n        ) : (\r\n          <Redirect\r\n            to={{\r\n              pathname: '/login',\r\n              state: { from: location },\r\n            }}\r\n          />\r\n        )\r\n      }}\r\n    />\r\n  )\r\n\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route path=\"/login\">\r\n          <Login />\r\n        </Route>\r\n        <Route path=\"/validate\">\r\n          <Validate />\r\n        </Route>\r\n        <AuthRoute>\r\n          <Route exact path=\"/\">\r\n            <div>\r\n              <h1>login here</h1>\r\n            </div>\r\n          </Route>\r\n        </AuthRoute>\r\n      </Switch>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default connector(RouterContainer)\r\n","import React from 'react'\nimport { Provider } from 'react-redux'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport createStore from '~/configs/configureStore'\nimport Router from '~/Router'\nimport 'antd/dist/antd.css'\n\nconst { store, persistor } = createStore()\n\nconst App = () => (\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <Router />\n    </PersistGate>\n  </Provider>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}